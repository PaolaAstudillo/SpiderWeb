import logging
import re
from urllib.parse import urljoin, urlparse, unquote
from arrow import now
import requests
import httpx
import http.client
import pycurl
from io import BytesIO
from fake_useragent import UserAgent
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from monitoring_app.models import EnlaceRoto, Pagina
from webdriver_manager.chrome import ChromeDriverManager

logger = logging.getLogger(__name__)

class EstadoHTTPDetector:
    def __init__(self, url):
        self.url = url

    def detectar_estado_http_selenium(self):
        """Detecta el estado HTTP usando requests y Selenium."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        service = Service('C:/chromedriver/chromedriver.exe')
        driver = None

        try:
            # Verificar el estado HTTP con requests primero
            response = requests.get(self.url, timeout=30, verify=False)
            status_code = response.status_code
            logger.info(f"üåê Estado HTTP de {self.url}: {status_code}")

            if status_code == 200:
                # Si el estado HTTP es exitoso, usar Selenium para verificar el contenido
                driver = webdriver.Chrome(service=service, options=chrome_options)
                driver.get(self.url)
                #uso etiquetas para incluier contenido 
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

                # Verificar contenido de la p√°gina para estados espec√≠ficos
                page_source = driver.page_source
                if "404" in driver.title or "Page Not Found" in page_source:
                    logger.warning(f"üö´ P√°gina no encontrada (404): {self.url}")
                    return 404
                elif "500" in driver.title or "Server Error" in page_source:
                    logger.error(f"üí• Error del servidor (500): {self.url}")
                    return 500
                else:
                    logger.info(f"‚úÖ P√°gina cargada correctamente: {self.url}")
                    return 200
            else:
                logger.warning(f"‚ö†Ô∏è La solicitud a {self.url} devolvi√≥ el c√≥digo {status_code}")
                return status_code
        except requests.exceptions.Timeout:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        except requests.exceptions.ConnectionError:
            logger.error(f"üîå Error de conexi√≥n con {self.url}")
            return 503  # Service Unavailable
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return None
        finally:
            if driver:
                driver.quit()

    async def detectar_estado_http_requests(self):
        """Detecta el estado HTTP usando httpx con manejo avanzado de errores."""
        try:
            headers = {'User-Agent': UserAgent().random}
            async with httpx.AsyncClient(timeout=10, follow_redirects=True, headers=headers, verify=False) as client:
                response = await client.get(self.url)
                return response.status_code  # Devuelve el c√≥digo de estado HTTP
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout en {self.url}")
            return 408  # Request Timeout
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ö†Ô∏è Error HTTP en {self.url}: {e.response.status_code}")
            return e.response.status_code
        except httpx.RequestError as e:
            logger.error(f"‚ùå Error de conexi√≥n en {self.url}: {e}")
            return 503  # Service Unavailable

    def detectar_estado_http_http_client(self):
        """Detecta el estado HTTP usando http.client."""
        try:
            # Parsear la URL para extraer esquema, host y ruta
            parsed_url = urlparse(self.url)
            scheme = parsed_url.scheme
            netloc = parsed_url.netloc
            path = parsed_url.path or "/"

            # Verificar que la URL tenga un esquema y un host v√°lidos
            if not scheme or not netloc:
                logger.error(f"‚ùå URL inv√°lida: {self.url}")
                return None

            # Configurar la conexi√≥n seg√∫n el esquema
            conn = (http.client.HTTPSConnection(netloc) if scheme == "https" 
                    else http.client.HTTPConnection(netloc))

            # Realizar la solicitud HTTP GET
            logger.info(f"üåê Conectando a {scheme}://{netloc}{path}")
            conn.request("GET", path)
            response = conn.getresponse()
            status_code = response.status
            reason = response.reason

            # Loguear el resultado
            logger.info(f"‚úÖ Respuesta recibida: {status_code} {reason}")
            return status_code
        except http.client.HTTPException as http_err:
            logger.error(f"‚ùå Error de protocolo HTTP: {http_err}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return None
        finally:
            try:
                # Asegurar el cierre de la conexi√≥n
                if 'conn' in locals() and conn:
                    conn.close()
                    logger.info("üîí Conexi√≥n cerrada correctamente")
            except Exception as close_err:
                logger.warning(f"‚ö†Ô∏è Error al cerrar la conexi√≥n: {close_err}")

    def detectar_estado_http_pycurl(self):
        """Detecta el estado HTTP usando PyCurl"""
        buffer = BytesIO()
        c = pycurl.Curl()

        try:
            # Configuraci√≥n de PyCurl
            logger.info(f"üåê Conectando a {self.url} usando PyCurl")
            c.setopt(c.URL, self.url)
            c.setopt(c.WRITEDATA, buffer)  # Donde almacenar la respuesta
            c.setopt(c.FOLLOWLOCATION, True)  # Seguir redirecciones
            c.setopt(c.TIMEOUT, 10)  # Timeout de la conexi√≥n
            c.setopt(c.SSL_VERIFYPEER, 0)  # Deshabilitar la verificaci√≥n SSL (no recomendado en producci√≥n)
            c.setopt(c.SSL_VERIFYHOST, 0)  # Deshabilitar la verificaci√≥n del host

            # Realizar la solicitud
            c.perform()

            # Obtener el c√≥digo de estado HTTP
            status_code = c.getinfo(c.RESPONSE_CODE)
            logger.info(f"‚úÖ Respuesta recibida: {status_code}")
            return status_code
        except pycurl.error as curl_err:
            logger.error(f"‚ùå Error de PyCurl: {curl_err}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return None
        finally:
            try:
                c.close()
                logger.info("üîí Conexi√≥n cerrada correctamente con PyCurl")
            except Exception as close_err:
                logger.warning(f"‚ö†Ô∏è Error al cerrar la conexi√≥n de PyCurl: {close_err}")

    async def detectar_estado_http_300(self):
        """
        Detecta el estado HTTP de una URL, manejando espec√≠ficamente los c√≥digos de redireccionamiento (3xx).
        Adem√°s, detecta redirecciones que involucran cambios en la codificaci√≥n de la URL.

        :return: El c√≥digo de estado HTTP final despu√©s de seguir las redirecciones, o None si ocurre un error.
        """
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, follow_redirects=True, timeout=30)
            
            status_code = response.status_code
            logger.info(f"üåê Estado HTTP final de {self.url}: {status_code}")
            
            if 300 <= status_code < 400:
                logger.info(f"üîÄ Redireccionamiento detectado: {status_code}")
                final_url = str(response.url)
                logger.info(f"üîÄ Redireccionado a: {final_url}")
                
                original_parsed = urlparse(self.url)
                final_parsed = urlparse(final_url)
                
                original_path = unquote(original_parsed.path)
                final_path = unquote(final_parsed.path)
                
                if original_path != final_path:
                    logger.info(f"üîÄ Cambio en la codificaci√≥n de la URL detectado: {original_path} -> {final_path}")
            
            return status_code
        
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url}: {e}")
            return 503  # Service Unavailable
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return None

    async def detectar_redireccionamientos_complejos(self):
        """
        Detecta redireccionamientos complejos, incluyendo cambios en la codificaci√≥n de la URL.
        """
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, follow_redirects=False, timeout=30)
                
                if response.status_code in (301, 302, 307, 308):
                    location = response.headers.get('Location')
                    if location:
                        new_url = urljoin(self.url, location)
                        logger.info(f"üîÄ Redireccionamiento detectado: {self.url} -> {new_url}")
                        
                        # Verificar si hay cambios en la codificaci√≥n de la URL
                        original_parsed = urlparse(self.url)
                        new_parsed = urlparse(new_url)
                        
                        original_path = unquote(original_parsed.path)
                        new_path = unquote(new_parsed.path)
                        
                        if original_path != new_path:
                            logger.info(f"üîÄ Cambio en la codificaci√≥n de la URL detectado: {original_path} -> {new_path}")
                        
                        return await self.detectar_estado_http_300()
                    else:
                        logger.warning(f"‚ö†Ô∏è Redireccionamiento sin cabecera 'Location': {self.url}")
                        return response.status_code
                else:
                    return response.status_code
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url}: {e}")
            return 503  # Service Unavailable
        except Exception as e:
            logger.error(f"‚ùå Error inesperado: {e}")
            return None



    async def detectar_estado_403(self):
        """
        Detecta si una p√°gina devuelve un error 403, ya sea en p√°ginas din√°micas o est√°ticas.
        
        :return: El c√≥digo de estado HTTP (403 si se detecta, None si no).
        """
        try:
            # 1. Verificaci√≥n inicial con httpx (para p√°ginas est√°ticas)
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, timeout=30)
            
            # Verificar el c√≥digo de estado HTTP
            if response.status_code == 403:
                logger.warning(f"üö´ Acceso prohibido (403) detectado en {self.url} (HTTPX)")
                return 403
            
            # Analizar el contenido HTML para buscar indicadores comunes de 403
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Verificar el t√≠tulo y el contenido HTML est√°tico
            if self._buscar_indicadores_403(soup):
                logger.warning(f"üö´ Acceso prohibido (403) detectado en el contenido est√°tico de la p√°gina: {self.url}")
                return 403
            
            # 2. Verificaci√≥n con Selenium (para p√°ginas din√°micas con JavaScript)
            chrome_options = Options()
            chrome_options.add_argument("--headless")  # Ejecutar en modo sin cabeza (headless)
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            
            # Configurar el WebDriver de Selenium
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
            driver.get(self.url)
            
            # Obtener el HTML renderizado despu√©s de ejecutar JavaScript
            content = driver.page_source
            soup_dynamic = BeautifulSoup(content, 'html.parser')
            
            # Verificar el t√≠tulo y el contenido din√°mico
            if self._buscar_indicadores_403(soup_dynamic):
                logger.warning(f"üö´ Acceso prohibido (403) detectado en el contenido din√°mico de la p√°gina: {self.url}")
                driver.quit()
                return 403
            
            logger.info(f"‚úÖ No se detect√≥ ning√∫n error 403 en la p√°gina din√°mica: {self.url}")
            driver.quit()
            return None
        
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url} (HTTPX)")
            return 408  # Request Timeout
        
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url} (HTTPX): {e}")
            return 503  # Service Unavailable
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en {self.url}: {e}")
            return None

    def _buscar_indicadores_403(self, soup):
        """
        Busca indicadores de error 403 en el contenido HTML de una p√°gina.
        
        :param soup: Objeto BeautifulSoup con el contenido HTML de la p√°gina.
        :return: True si se detecta un error 403, False en caso contrario.
        """
        # Buscar en el t√≠tulo
        title = soup.find('title')
        if title and re.search(r'403|access denied|forbidden', title.text, re.IGNORECASE):
            return True
        
        # Buscar en elementos de texto comunes
        error_messages = soup.find_all(text=re.compile(r'403|access denied|forbidden', re.IGNORECASE))
        if error_messages:
            return True
        
        return False



    async def detectar_estado_404(self):
        """
        Detecta si una p√°gina devuelve un error 404, ya sea por c√≥digo de estado o por contenido.
        
        :return: El c√≥digo de estado HTTP (404 si se detecta, None si no).
        """
        try:
            # Realizar la solicitud HTTP
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, timeout=30)
            
            # Verificar el c√≥digo de estado HTTP
            if response.status_code == 404:
                logger.warning(f"üö´ 404 detectado por c√≥digo de estado en {self.url}")
                return 404
            
            # Analizar el contenido HTML para buscar indicadores comunes de 404
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Buscar en el t√≠tulo
            title = soup.find('title')
            if title and re.search(r'404|not found|page not found', title.text, re.IGNORECASE):
                logger.warning(f"üö´ 404 detectado en el t√≠tulo de la p√°gina: {self.url}")
                return 404
            
            # Buscar en elementos span u otros que puedan contener mensajes de error
            error_messages = soup.find_all(text=re.compile(r'404|not found|page not found', re.IGNORECASE))
            if error_messages:
                logger.warning(f"üö´ 404 detectado en el contenido de la p√°gina: {self.url}")
                return 404
            
            # Si no se encuentra ning√∫n indicador de 404
            logger.info(f"‚úÖ No se detect√≥ ning√∫n error 404 en {self.url}")
            return None
        
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url}: {e}")
            return 503  # Service Unavailable
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en {self.url}: {e}")
            return None






    async def detectar_estado_500(self):
        """
        Detecta si una p√°gina devuelve un error 500, ya sea por c√≥digo de estado o por contenido.
        
        :return: El c√≥digo de estado HTTP (500 si se detecta, None si no).
        """
        try:
            # Realizar la solicitud HTTP
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, timeout=30)
            
            # Verificar el c√≥digo de estado HTTP
            if response.status_code == 500:
                logger.error(f"üí• Error del servidor (500): {self.url}")
                return 500
            
            # Analizar el contenido HTML para buscar indicadores comunes de 500
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Buscar en el t√≠tulo
            title = soup.find('title')
            if title and re.search(r'500|server error', title.text, re.IGNORECASE):
                logger.error(f"üí• Error del servidor (500) detectado en el t√≠tulo de la p√°gina: {self.url}")
                return 500
            
            # Buscar en elementos span u otros que puedan contener mensajes de error
            error_messages = soup.find_all(text=re.compile(r'500|server error', re.IGNORECASE))
            if error_messages:
                logger.error(f"üí• Error del servidor (500) detectado en el contenido de la p√°gina: {self.url}")
                return 500
            
            # Si no se encuentra ning√∫n indicador de 500
            logger.info(f"‚úÖ No se detect√≥ ning√∫n error 500 en {self.url}")
            return None
        
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url}: {e}")
            return 503  # Service Unavailable
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en {self.url}: {e}")
            return None

    async def detectar_estado_http_completo(self):
        """
        Detecta el estado HTTP completo de una URL, manejando todos los c√≥digos de estado posibles.
        
        :return: El c√≥digo de estado HTTP final, o None si ocurre un error.
        """
        try:
            # Primero, verificar el estado HTTP b√°sico
            status_code = await self.detectar_estado_http_requests()
            
            if status_code is None:
                return None
            
            # Manejar redireccionamientos
            if 300 <= status_code < 400:
                status_code = await self.detectar_estado_http_300()
            
            # Manejar errores espec√≠ficos
            if status_code == 404:
                return await self.detectar_estado_404()
            elif status_code == 500:
                return await self.detectar_estado_500()
            
            return status_code
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en {self.url}: {e}")
            return None
        


    async def detectar_estado_http_robusto(self):
        """
        Detecta el estado HTTP de una URL de manera robusta, manejando todos los posibles errores,
        redireccionamientos y c√≥digos de estado espec√≠ficos como 403, 404, 500, etc.
        Es compatible con p√°ginas est√°ticas y din√°micas (JavaScript).
        
        :return: El c√≥digo de estado HTTP final, o None si ocurre un error.
        """
        try:
            # 1. Verificaci√≥n inicial con httpx (para p√°ginas est√°ticas)
            status_code = await self.detectar_estado_http_requests()
            
            if status_code is None:
                logger.error(f"‚ùå No se pudo obtener el estado HTTP para {self.url}")
                return None
            
            # 2. Manejar redireccionamientos (c√≥digos 3xx)
            if 300 <= status_code < 400:
                logger.info(f"üîÄ Redireccionamiento detectado para {self.url}")
                status_code = await self.detectar_estado_http_300()
            
            # 3. Manejar errores espec√≠ficos
            if status_code == 403:
                logger.warning(f"üö´ Acceso prohibido (403) detectado en {self.url}")
                return 403
            elif status_code == 404:
                logger.warning(f"üö´ P√°gina no encontrada (404) detectada en {self.url}")
                return 404
            elif status_code == 500:
                logger.error(f"üí• Error del servidor (500) detectado en {self.url}")
                return 500
            elif status_code == 408:
                logger.error(f"‚è≥ Timeout al conectar con {self.url}")
                return 408
            elif status_code == 503:
                logger.error(f"üîå Servicio no disponible (503) detectado en {self.url}")
                return 503
            
            # 4. Si el c√≥digo de estado es 200, verificamos el contenido para asegurarnos de que no hay errores ocultos
            if status_code == 200:
                logger.info(f"‚úÖ P√°gina cargada correctamente: {self.url}")
                
                # Verificar errores ocultos en el contenido (p.ej., 404 o 500 en el t√≠tulo o contenido)
                if await self.detectar_estado_404():
                    return 404
                if await self.detectar_estado_500():
                    return 500
                
                # Verificar contenido din√°mico con Selenium si es necesario
                if await self._es_pagina_dinamica():
                    logger.info(f"üåê La p√°gina parece ser din√°mica, usando Selenium para verificar el contenido.")
                    status_code_dinamico = await self._verificar_contenido_dinamico()
                    if status_code_dinamico is not None:
                        return status_code_dinamico
            
            # 5. Si no se detectaron errores espec√≠ficos, devolvemos el c√≥digo de estado
            return status_code
        
        except httpx.TimeoutException:
            logger.error(f"‚è≥ Timeout al conectar con {self.url}")
            return 408  # Request Timeout
        
        except httpx.RequestError as e:
            logger.error(f"üîå Error de conexi√≥n con {self.url}: {e}")
            return 503  # Service Unavailable
        
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en {self.url}: {e}")
            return None

    async def _es_pagina_dinamica(self):
        """
        Determina si una p√°gina es din√°mica (usa JavaScript) analizando el contenido inicial.
        
        :return: True si la p√°gina es din√°mica, False en caso contrario.
        """
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(self.url, timeout=30)
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Buscar scripts o elementos que indiquen que la p√°gina es din√°mica
                scripts = soup.find_all('script')
                if scripts:
                    logger.info(f"üìú Se detectaron scripts en {self.url}, la p√°gina puede ser din√°mica.")
                    return True
                return False
        except Exception as e:
            logger.error(f"‚ùå Error al verificar si la p√°gina es din√°mica: {e}")
            return False

    async def _verificar_contenido_dinamico(self):
        """
        Verifica el contenido de una p√°gina din√°mica usando Selenium.
        
        :return: El c√≥digo de estado HTTP detectado, o None si no se encontraron errores.
        """
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Ejecutar en modo sin cabeza (headless)
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        driver = None
        try:
            # Configurar el WebDriver de Selenium
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
            driver.get(self.url)
            
            # Esperar a que la p√°gina se cargue completamente
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            
            # Obtener el HTML renderizado despu√©s de ejecutar JavaScript
            content = driver.page_source
            soup = BeautifulSoup(content, 'html.parser')
            
            # Verificar errores en el contenido din√°mico
            if self._buscar_indicadores_404(soup):
                logger.warning(f"üö´ 404 detectado en el contenido din√°mico de la p√°gina: {self.url}")
                return 404
            elif self._buscar_indicadores_500(soup):
                logger.error(f"üí• Error del servidor (500) detectado en el contenido din√°mico de la p√°gina: {self.url}")
                return 500
            
            logger.info(f"‚úÖ No se detectaron errores en el contenido din√°mico de la p√°gina: {self.url}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error al verificar el contenido din√°mico: {e}")
            return None
        finally:
            if driver:
                driver.quit()
                logger.info("üîí WebDriver de Selenium cerrado correctamente.")

    def _buscar_indicadores_404(self, soup):
        """
        Busca indicadores de error 404 en el contenido HTML de una p√°gina.
        
        :param soup: Objeto BeautifulSoup con el contenido HTML de la p√°gina.
        :return: True si se detecta un error 404, False en caso contrario.
        """
        title = soup.find('title')
        if title and re.search(r'404|not found|page not found', title.text, re.IGNORECASE):
            return True
        
        error_messages = soup.find_all(text=re.compile(r'404|not found|page not found', re.IGNORECASE))
        if error_messages:
            return True
        
        return False

    def _buscar_indicadores_500(self, soup):
        """
        Busca indicadores de error 500 en el contenido HTML de una p√°gina.
        
        :param soup: Objeto BeautifulSoup con el contenido HTML de la p√°gina.
        :return: True si se detecta un error 500, False en caso contrario.
        """
        title = soup.find('title')
        if title and re.search(r'500|server error', title.text, re.IGNORECASE):
            return True
        
        error_messages = soup.find_all(text=re.compile(r'500|server error', re.IGNORECASE))
        if error_messages:
            return True
        
        return False